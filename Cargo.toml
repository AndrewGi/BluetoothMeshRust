[package]
name = "bluetooth_mesh"
description = """
!! VERY WIP AND NOT STABLE !!

Offers Bluetooth Mesh Primitives (PDUs, Encryption/Decryption, Messages, etc). A stack in still in process of being built
but one should be able to build their own stack based on the provided primitives.

Bluetooth Mesh stack implemented in Rust. In progress port/rewrite of Ero Bluetooth Mesh. Following the Bluetooth Mesh Spec Core v1.0. Designed to work with any BLE radio but currently targeting linux for testing. The complete stack still needs more glue between the layers but all the parts should be fully functional. If any mistake are found, please contact me!

#![no_std] excepts for dependence on std::Instant for time but a different source can be provided. While not provided, on ARM; a crystal oscilator can be the time source.

Partially serde support but still needs much more work.

The only heap allocations made durning processing a message is allocating memory for the message at the access layer. Most Mesh PDUs are <31 bytes (to fit in a single BLE Advertisement) so the Network and Lower Transport Layer stores its data staticly on the stack.
"""
license = "GPL-3.0-only"
repository = "https://github.com/AndrewGi/BluetoothMeshRust"
version = "0.1.3"
authors = ["Andrew Gilbrough <andrew@gilbrough.com>"]
edition = "2018"
readme = "README.md"

[features]
default = ["full_stack"]
full_stack = ["std", "tokio", "futures-core", "futures-util"]
serde-1 = ["serde"]
std = []

[dependencies]
btle = {path = "btle", default-features = false}
tokio = {version = "0.2.11", optional=true, default-features = false, features=["sync", "rt-core", "time"]}
futures-core = {version = "0.3.4", optional=true}
futures-util = {version = "0.3.4", optional=true}
rand = "0.7"
aes = "0.3.2"
aead = "0.2.0"
dbl = "0.2.1"
block-modes = "0.3.3"
subtle = "2.2.2"
serde = {version = "1.0.104", default-features = false, features = ["derive"], optional = true }
